name: ci
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  release:
    types: [created]  # Only publish on tagged releases
jobs:
  codespell_and_ruff:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/ruff-action@v3
      - run: pipx run 'codespell[toml]' **/*.py **/*.txt --skip="venv/lib/python3*"
  
  docs:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with: 
          python-version: 3.12
      - run: |
          python -m pip install -U pip setuptools wheel
          python -m pip install pydoctor
      - run: |
          # Do not consider exit code 2 as a real error
          trap 'if [[ "$?" == "2" ]]; then exit 0; fi' EXIT
          # Run pydoctor
          pydoctor \
            --project-url=https://github.com/$GITHUB_REPOSITORY \
            --html-viewsource-base=https://github.com/$GITHUB_REPOSITORY/tree/$GITHUB_SHA \
            --html-base-url=https://$GITHUB_REPOSITORY_OWNER.github.io/${GITHUB_REPOSITORY#*/} \
            --html-output=./www \
            fluidsynth.py
      - if: github.ref == 'refs/heads/master'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./www
          commit_message: "Generate API documentation"
          
  ci:
    needs: [codespell_and_ruff]
    strategy:
      fail-fast: false
      matrix:  # macos-13 in Intel, macos-latest is Apple Silicon ARM
        os: [macos-13, macos-latest, ubuntu-latest, ubuntu-24.04-arm, windows-latest, windows-2025]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v6
        with:
          activate-environment: true
          python-version: 3.13
          version: "latest"
      - if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install fluidsynth libasound-dev portaudio19-dev python3-pyaudio
      - if: runner.os == 'macOS'
        run: |
          brew install fluid-synth
          echo "DYLD_LIBRARY_PATH=$(brew --prefix fluid-synth)/lib/" >> $GITHUB_ENV
      - if: runner.os == 'Windows'
        run: choco install fluidsynth
      - run: uv pip install --editable .
      - shell: python
        run: |
          import fluidsynth
          print(fluidsynth)
          print(dir(fluidsynth))
      # NOTE: The files in test/ are NOT unit tests or pytests.
      # On macOS ARM64 the following tests will pass but each takes 8 minutes to run.
      # On macOS X64 all tests will pass quickly.
      - if: runner.os == 'macOS' && runner.arch == 'X64'
        run: |
          python test/test1.py
          python test/test2.py
          python test/test3.py
          python test/sequencerTest.py
      - if: runner.os == 'Linux'
        run: |
          python test/test1.py
          python test/test3.py
          python test/sequencerTest.py
      # On Windows all tests will pass quickly.
      - if: runner.os == 'Windows'
        run: |
          python test/test1.py
          python test/test2.py
          python test/test3.py
          python test/sequencerTest.py

  build:
    needs: [ci]
    runs-on: ubuntu-latest
    permissions:
      id-token: write 

    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v6
        with:
          python-version: 3.13
          version: "latest"

      - name: Clean previous builds
        run: rm -rf dist

      - name: Build package
        run: |
          uv build
          uvx twine check --strict dist/*
          ls -la dist

      - name: Upload dist directory as artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist

  pypi-publish:
    needs: [build]
    name: upload release to PyPI
    if: github.event_name == 'release' && github.event.action == 'created'  # Only on release creation
    runs-on: ubuntu-latest
    # Specifying a GitHub environment is optional, but strongly encouraged
    environment: release
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write
    steps:
      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist
      - run: ls -la
      - run: ls -la dist || true
      - uses: astral-sh/setup-uv@v6
        with:
          python-version: 3.13
          version: "latest"
      - run: uv publish
